! This NDFC VRF-Lite OSPF config data structure is auto-generated
! DO NOT EDIT MANUALLY
!
!
{% set redistribute = {} %}
{% set feature = {} %}
{% if item.ospf.bfd.enabled %}
  {% set _ = feature.update({'bfd': true}) %}
{% endif %}
{% if switch_item.interfaces %}
  {% for interface in switch_item.interfaces %}
    {% if interface.ospf.bfd.enabled %}
      {% set _ = feature.update({'bfd': true}) %}
    {% endif %}
  {% endfor %}
{% endif %}
{% if feature['bfd']%}
feature bfd
!
{% endif %}
vrf context {{ item.vrf }}
  {% if switch_item.static_routes %}
    {% for static_route in switch_item.static_routes %}
      {% for next_hop in static_route.next_hops %}
        {% if static_route.route_tag is defined and static_route.route_tag %}
  ip route {{ static_route.prefix }} {{ next_hop.ip }} tag {{ static_route.route_tag }}
        {% else %}
  ip route {{ static_route.prefix }} {{ next_hop.ip }}
        {% endif %}
      {% endfor %}
    {% endfor %}
  {% endif %}
  address-family ipv4 unicast
    route-target both auto
    route-target both auto evpn
!
router ospf {{ item.ospf['process'] }}
  vrf {{ item.vrf }}
    {% if switch_item['router_id'] %}
    router-id {{ switch_item['router_id'] }}
    {% endif %}
    {% if item.ospf.areas %}
      {% for area in item.ospf.areas %}
        {% if area.id and (area.id != 0 or area.id != '0.0.0.0') %}
          {% if area.area_type and area.area_type == 'stub' %}
    area {{ area.id | ipaddr('address') }} stub
          {% elif area.area_type and area.area_type == 'totally_stub' %}
    area {{ area.id | ipaddr('address') }} stub no-summary
          {% elif area.area_type and area.area_type == 'nssa' %}
    area {{ area.id | ipaddr('address') }} nssa
          {% endif %}
        {% endif %}
        {% if area.area_cost is defined and area.area_cost != 1 and area.id != 0 %}
    area {{ area.id | ipaddr('address') }} default-cost {{ area.area_cost }}
        {% elif area.area_cost is defined and area.area_cost != 1%}
    area 0.0.0.0 default-cost {{ area.area_cost }}
        {% endif %}
      {% endfor %}
    {% endif %}
    {% if item.ospf.distance and item.ospf.distance != defaults.vxlan.overlay_extensions.vrf_lites.ospf.distance %}
    distance {{ item.ospf.distance }}
    {% endif %}
    {% if switch_item.redistribution %}
      {% for switch_redist in switch_item.redistribution %}
        {% if switch_redist.source == 'direct' and switch_redist.route_map %}
    redistribute direct route-map {{ switch_redist.route_map }}
        {% endif %}
        {% if switch_redist.source == 'static' and switch_redist.route_map %}
    redistribute static route-map {{ switch_redist.route_map }}
        {% endif %}
        {% if switch_redist.source == 'bgp' and switch_redist.route_map %}
    redistribute bgp {{ MD_Extended.vxlan.global.bgp_asn }} route-map {{ switch_redist.route_map }}
        {% endif %}
        {% if switch_redist.source == 'ospf' and switch_redist.route_map %}
          {% set _ = redistribute.update({'ospf': switch_redist.route_map}) %}
        {% endif %}
      {% endfor %}
    {% endif %}
!
{% if redistribute['ospf'] %}
router bgp {{ MD_Extended.vxlan.global.bgp_asn }}
  vrf {{ item.vrf }}
    address-family ipv4 unicast
      redistribute ospf {{ item.ospf['process'] }} route-map {{ redistribute['ospf'] }}
!
{% endif %}
{% if switch_item.interfaces %}
  {% for interface in switch_item.interfaces %}
    {% set interface_name = interface['name'] | lower %}
interface {{ interface['name'] }}
    {% if interface_name.startswith('lo') %}
      {% if interface.ospf['network_type'] and interface.ospf['network_type'] != 'broadcast' %}
  ip ospf network {{ interface.ospf['network_type'] }}
      {% endif %}
    {% elif interface.ospf['network_type'] %}
  ip ospf network {{ interface.ospf['network_type'] }}
    {% endif %}
    {% if interface.ospf['area'] is defined and interface.ospf['area'] != 0 %}
  ip router ospf {{ item.ospf['process'] }} area {{ interface.ospf['area'] | ipaddr('address') }}
    {% else %}
  ip router ospf {{ item.ospf['process'] }} area 0.0.0.0
    {% endif %}
    {% if interface.ospf.auth_type and interface.ospf.auth_type == 'simple' %}
  ip ospf authentication
      {% if interface.ospf.auth_key %}
  ip ospf authentication-key 3 {{ interface.ospf.auth_key }}
      {% endif %}
    {% elif interface.ospf.auth_type and interface.ospf.auth_type == 'md5' %}
  ip ospf authentication message-digest
      {% if interface.ospf.auth_key %}
  ip ospf message-digest-key {{ interface.ospf.auth_key_id | default(defaults.vxlan.overlay_extensions.vrf_lites.switches.interfaces.ospf.auth_key_id) }} md5 3 {{ interface.ospf.auth_key }}
      {% endif %}
    {% endif %}
    {% if interface.ospf.cost %}
  ip ospf cost {{ interface.ospf.cost }}
    {% endif %}
    {% if interface.ospf.passive_interface %}
  ip ospf passive-interface
    {% endif %}
    {% if interface.ospf.mtu_ignore %}
  ip ospf mtu-ignore
    {% endif %}
    {% if interface.ospf.bfd.enabled %}
  ip ospf bfd
    {% endif %}
    {% if interface.ospf.hello_interval and interface.ospf.hello_interval != defaults.vxlan.overlay_extensions.vrf_lites.switches.interfaces.ospf.hello_interval %}
  ip ospf hello-interval {{ interface.ospf.hello_interval }}
    {% endif %}
  ip ospf dead-interval {{ interface.ospf.dead_interval | default(defaults.vxlan.overlay_extensions.vrf_lites.switches.interfaces.ospf.dead_interval) }}
    {% if interface.ospf.priority and interface.ospf.priority != defaults.vxlan.overlay_extensions.vrf_lites.switches.interfaces.ospf.priority %}
  ip ospf priority {{ interface.ospf.priority }}
    {% endif %}
    {% if interface.ospf.lsa_retransmit_interval and interface.ospf.lsa_retransmit_interval != defaults.vxlan.overlay_extensions.vrf_lites.switches.interfaces.ospf.lsa_retransmit_interval %}
  ip ospf retransmit-interval {{ interface.ospf.lsa_retransmit_interval }}
    {% endif %}
    {% if interface.ospf.lsa_transmit_delay and interface.ospf.lsa_transmit_delay != defaults.vxlan.overlay_extensions.vrf_lites.switches.interfaces.ospf.lsa_transmit_delay %}
  ip ospf transmit-delay {{ interface.ospf.lsa_transmit_delay }}
    {% endif %}
    {% if interface_name.startswith('lo') and interface.ospf['advertise_subnet'] == true %}
  ip ospf advertise-subnet
    {% endif %}
!  
  {% endfor %}
{% endif %}