# Copyright (c) 2024 Cisco Systems, Inc. and its affiliates
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# SPDX-License-Identifier: MIT

---

- name: Manage Fabric Intra Fabric Links Entry Point
  ansible.builtin.debug:
    msg:
      - "----------------------------------------------------------------"
      - "+     Manage Fabric Links {{ MD.vxlan.global.name }}"
      - "----------------------------------------------------------------"

# --------------------------------------------------------------------
# Manage Intra Fabric Links
# --------------------------------------------------------------------

- name: Query Links - with Src & Dst Fabric, Src & Dst Intf, Src & Dst Device
  cisco.dcnm.dcnm_links:
    state: query                                             # choose from [merged, replaced, deleted, query]
    src_fabric: "{{ MD.vxlan.global.name }}"
    config:
      - dst_fabric: "{{ MD.vxlan.global.name }}"             # Destination fabric
        src_interface: "{{ link.source_interface }}"                         # Interface on the Source fabric
        dst_interface: "{{ link.dest_interface }}"                         # Interface on the Destination fabric
        src_device: "{{ link.source_device }}"                              # Device on the Source fabric
        dst_device: "{{ link.dest_device }}"
  register: result

- name: Create Link
  cisco.dcnm.dcnm_links:
      state: merged                                            # choose from [merged, replaced, deleted, query]
      src_fabric: "{{ MD.vxlan.global.name }}"
      config:
        - dst_fabric: "{{ MD.vxlan.global.name }}"             # Destination fabric
          src_interface: "{{ link.source_interface }}"                         # Interface on the Source fabric
          dst_interface: "{{ link.dest_interface }}"                         # Interface on the Destination fabric
          src_device: "{{ link.source_device }}"                              # Device on the Source fabric
          dst_device: "{{ link.dest_device }}"                             # Device on the Destination fabric
          template: int_pre_provision_intra_fabric_link        # template to be applied, choose from
                                                               #   [ int_intra_fabric_ipv6_link_local, int_intra_fabric_num_link,
                                                               #     int_intra_fabric_unnum_link, int_intra_vpc_peer_keep_alive_link,
                                                               #     int_pre_provision_intra_fabric_link, ios_xe_int_intra_fabric_num_link ]

          profile:
              admin_state: true                                  # choose from [true, false]
              mtu: 9216
  when: (result["response"] | length) == 0      # Only create the link if it's not already found
  ignore_errors: True
