# Copyright (c) 2024 Cisco Systems, Inc. and its affiliates
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# SPDX-License-Identifier: MIT

---
# tasks file for render

# - name: Set vrf_lite_file_name Var
#   ansible.builtin.set_fact:
#     vrf_lite_file_name: "{{ MD.vxlan.global.name }}_vrf_lite.yml"
#   delegate_to: localhost

# - name: Build VRF-Lite From Template
#   ansible.builtin.template:
#     src: vrf_lite.j2
#     dest: "{{ role_path }}/files/{{ vrf_lite_file_name }}"
#   delegate_to: localhost

# - name: Create Empty vrf_lite_config Var
#   ansible.builtin.set_fact:
#     vrf_lite_config: []
#   delegate_to: localhost

# - name: Set vrf_lite_config Var
#   ansible.builtin.set_fact:
#     vrf_lite_config: "{{ lookup('file', vrf_lite_file_name) | from_yaml }}"
#   when: MD_Extended.vxlan.overlay_extension.vrf_lites is defined and MD_Extended.vxlan.overlay_extension.vrf_lites is iterable
#   delegate_to: localhost

- name: Render VRF-Lite Configuration
  cisco.nac_dc_vxlan.common.render:
    data: "{{ MD_Extended }}"
    iterable: "{{ MD_Extended.vxlan.overlay_extensions.vrf_lites }}"
    templates_path: "{{ role_path }}/templates/"
    template_filename: vrf_lite.j2
  when: MD_Extended.vxlan.overlay_extensions.vrf_lites is defined and MD_Extended.vxlan.overlay_extensions.vrf_lites is iterable
  register: return_data
  delegate_to: localhost

- name: Store Extended Service Model Data
  ansible.builtin.set_fact:
    MD_Extended: "{{ return_data['data'] }}"
  delegate_to: localhost

# Copy the current golden and extended service model data to the host
- name: Copy Service Model Data to Host
  ansible.builtin.copy:
    content: "{{ MD | to_nice_json }}"
    dest: "{{ role_path }}/files/{{ MD.vxlan.global.name }}_service_model_golden.json"
    force: yes
  delegate_to: localhost

# Copy the extended golden and extended service model data to the host
- name: Copy Extended Service Model Data to Host
  ansible.builtin.copy:
    content: "{{ MD_Extended | to_nice_json }}"
    dest: "{{ role_path }}/files/{{ MD.vxlan.global.name }}_service_model_extended.json"
    force: yes
  delegate_to: localhost

# Read current golden service model data into a variable called 'smd_golden_current'
- name: Read Current Service Model Data from Host
  ansible.builtin.include_vars:
    file: "{{ role_path }}/files/{{ MD.vxlan.global.name }}_service_model_golden.json"
  register: smd_golden_current
  delegate_to: localhost

- name: Display Model File Changes
  ansible.utils.fact_diff:
    before: "{{ smd_golden_previous }}"
    after: "{{ smd_golden_current }}"
  when: check_roles['save_previous']
  delegate_to: localhost
